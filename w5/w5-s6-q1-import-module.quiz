<hr/>
Processus d'importation d'un module (1)
=====

Comment est-ce que l'interpréteur python trouve la localisation du fichier d'un module sur le disque dur ? Il y a un ou plusieurs choix possibles.

[x] Dans le répertoire courant, c'est-à-dire le répertoire depuis lequel on a lancé l'interpréteur python.
[ ] Python trouve automatiquement le fichier quelque soit sa localisation grâce à un mécanisme d'indexation.
[x] Dans une liste de répertoires contenue dans la variable d'environnement système <code>PYTHONPATH</code>.
[x] Dans les répertoires de la bibliothèque standard.
[ ] Il faut donner explicitement le chemin complet du fichier lorsque l'on importe un module.
[x] Dans la liste des répertoires contenue dans la variable <code>sys.path</code> qui regroupe tous les chemins de recherche.

[explanation]
Lorsque l'on importe un module <code>mod</code>, l'interpréteur python cherche en premier le fichier correspondant (<code>mod.py</code>) dans le répertoire courant, puis dans la liste des répertoires contenue dans la variable d'environnement système <code>PYTHONPATH</code>, puis dans les répertoires de la bibliothèque standard. Tous ces chemins sont contenus dans la variable <code>sys.path</code> au démarrage de l'interpréteur.
[explanation]

<hr/>
Processus d'importation d'un module (2)
=====

Comment forcer un module <code>mod</code> à être rechargé (on suppose que l'on utilise python 3.4 ou supérieur) ?

(x) <code>import importlib; importlib.reload(mod)</code>
( ) <code>import mod</code>
( ) Un module ne peut être chargé qu'une seule fois.

[explanation]
L'instruction <code>import</code> ne charge qu'une seule fois l'objet module pour des raisons de performance. Si on veut recharger un objet module parce qu'il a été modifié, il faut utiliser la fonction <code>importlib.reload</code>.
[explanation]


<hr/>
Processus d'importation d'un module (3)
=====

On suppose que le module <code>mod</code> n'a pas encore été chargé dans l'interpréteur. Cochez les cas pour lesquels un fichier <code>mod.pyc</code> est créé:

[x] Lors de l'importation du module avec <code>import mod</code> si le fichier <code>mod.pyc</code> n'existe pas encore
[ ] Toujours lors de l'importation du module avec <code>importlib.reload(mod)</code>
[x] Lors de l'importation du module avec <code>from mod import x</code> si le fichier <code>mod.pyc</code> est plus ancien que <code>mod.py</code>

[explanation]
Un fichier <code>mod.pyc</code> est créé à chaque fois que le module est compilé ou recompilé, c'est-à-dire, si le fichier <code>mod.py</code> n'a jamais été compilé ou s'il a changé depuis la dernière compilation. Un <code>importlib.reload(mod)</code> ne va créer le fichier <code>mod.pyc</code> que si le fichier <code>mod.py</code> a changé depuis la dernière compilation.
[explanation]
